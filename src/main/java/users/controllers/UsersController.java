package users.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import users.models.User;
import users.repositories.UserRepository;

import java.util.List;

@RestController
@RequestMapping(path="/users") // This means URL's start with /users (after Application path)
public class UsersController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name, @RequestParam String email ){
        //        // @ResponseBody means the returned String is the response, not a view name
//        // @RequestParam means it is a parameter from the GET or POST request
        try {
            User n = new User();
            n.setName(name);
            n.setEmail(email);
            userRepository.save(n);
            return "User Record Added";
        } catch (DataIntegrityViolationException e) {
            return "Email already exists";
        }
    }

    //new implementation
    @PostMapping(path = "/add-user")
    public ResponseEntity saveUser(@RequestBody User user){
        return new ResponseEntity(userRepository.save(user),HttpStatus.CREATED);
    }

    @GetMapping ("/all")
    public @ResponseBody Iterable<User> getAllUsers(){
            return userRepository.findAll();
        }

    @GetMapping("/{id}")
    public @ResponseBody Object getUser(@PathVariable Integer id){
         return userRepository.findById(id);
      }

    @PutMapping("/{id}")
    User updateUser(@RequestBody User newUser, @PathVariable Integer id) {

        User savedUser = userRepository.findById(id)
                .map(user -> {
                    user.setName(newUser.getName());
                    user.setEmail(newUser.getEmail());
                    return userRepository.save(user);
                })
                .orElseGet(() -> {
                    newUser.setId(Long.valueOf(id));
                    return userRepository.save(newUser);
                });

        return savedUser;
    }
}
